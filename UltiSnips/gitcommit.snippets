# Structured commit message template used in, for instance, GatorGrader
snippet commit "Structured Commit Message" i
${1:type:feat,fix,docs,coms,style,refactor,perf,test,chore}: ${2:subject}
endsnippet


# Structured PR template used in, for instance, GatorGrader
snippet pr "Pull Request" b
${1:description}

### What is the current behavior?

${2:current}

### What is the new behavior if this PR is merged?

${3:new}

##### This PR has:

- [${4:commit}] Commit messages that are correctly formatted
- [${5:tests}] Tests for newly introduced code
- [${6:docstrings}] Docstrings for newly introduced code

This PR is a ${7:type:small change, feature, compatibility breaking update, non-versioned change}.

#### Developers

@${8:username}

endsnippet

# GitHub format for pull requests
# Merge pull request #<number> from <branch>
# Expected by this tool:
# https://github.com/Michionlion/pr-tag-release
snippet merge "Merge PR message" i
Merge pull request #${1:number} from ${2:branch}
endsnippet
